#!/usr/bin/env bash
# Copyright   : (c) 2023-2025 Miao, ZhiCheng
# License     : LGPL-3
# Maintainer  : hellwolf@yolc.dev
# Synopsis    : yolc, the YulDSL commandline compiler

#######################################################################
# !!WARNING: This is a prototype script, it will be rewritten in THSH.
#######################################################################

#-----------------------------------------------------------------------------------------------------------------------
# Main Program, Utilities & Global Variables
#-----------------------------------------------------------------------------------------------------------------------

opt_verbose=; function is_verbose() { [[ -n "$opt_verbose" ]]; }
opt_force_rebuild=;
is_nix_dist=
dist_path=
out_dir=
build_dir=
codegen_name=
show_output_always=

help() {
  cat <<EOF
yolc, the YulDSL commandline transpiler.

Usage: yolc [options] yol_module_spec...

-m [codegen_mode] Valid codegen modes: yul (default), show, lisp, yul_and_show
-v                Output more information about what is going on
-f                Force the rebuild of RunYol module
-h                Display this help and exit

yol_module_spec: package_path{:module_name}{[symbol...,]}, where
    1) without specifying a module_name, 'Project' module is loaded instead,
    2) the default symbol for a module is 'object :: YulObject', otherwise symbols are of type 'Fn a b',
    3) the required symbol for a 'Project' module is 'manifest :: Manifest', no other symbol is supported.

EOF
}

die() {
  echo "$@" >&2
  exit 1
}

debug() {
  echo "$@" >&2
}

do_runyol() {
  local CABAL=(cabal --builddir="$build_dir")
  local CABAL_V=0
  is_verbose && CABAL_V=1
  runbin=$("${CABAL[@]}" "$@" -v0 list-bin runyol)
  "${CABAL[@]}" "$@" -v${CABAL_V} build runyol 1>&2 && {
    is_verbose && {
      debug "+ exec: $runbin"
    }
    $runbin
  }
}

main() {
  local PROGRAM_PATH="$0"
  local OPTIND OPTARG

  # parse options
  while getopts m:hvf o; do
    case $o in
      m)
        codegen_name=$OPTARG
        case "$OPTARG" in
          yul)
          ;;
          lisp | show)
            show_output_always=1
            ;;
          yul_and_show)
            codegen_name=yul
            show_output_always=1
            ;;
          *)
            die "Unknown output mode"
            ;;
        esac
        ;;
      v)
        opt_verbose=1
        ;;
      f)
        opt_force_rebuild=1
        ;;
      h)
        help; exit 0
        ;;
      *)
        help; exit 1
        ;;
    esac
  done
  shift $(( "$OPTIND" - 1 ))

  # detect distribution mode
  [[ -z "${PROGRAM_PATH##/nix/store}" ]] && is_nix_dist=1
  if [[ -n "$is_nix_dist" ]]; then
    ## FIXME support nix-distribution mode
    die "Nix-distribution mode not supported"
  else
    dist_path=$(readlink -f "$(dirname "$PROGRAM_PATH")"/../../..)
    out_dir=${dist_path}/build
    build_dir=$out_dir/default
    cabal_package_db=$(cabal -v0 --builddir="$build_dir" path --output-format=json |
                       jq -r '."store-dir" + "/" + .compiler.id + "-inplace/package.db"')
    dist_package_db=$(readlink -f "${build_dir}"/packagedb/ghc-9.10.1)
  fi

  is_verbose && {
    debug "Distribution path : $dist_path"
    debug "Codegen mode      : $codegen_name"
    debug "Output directory  : $out_dir"
    debug
  }

  mkdir -p "$out_dir"

  for i in "$@"; do
    build_yol_module "$i"
  done

  exit 0
}

#-----------------------------------------------------------------------------------------------------------------------
# Yol Module Builder
#-----------------------------------------------------------------------------------------------------------------------

build_yol_module() {
  #
  # Parse Yol Module Spec
  #

  local mod_spec
  mod_spec=$1
  is_verbose && debug "=== Building yol module: $mod_spec"

  # parse pkg_path, cabal_path, pkg_name
  local rest pkg_path cabal_path pkg_name
  IFS=: read -r pkg_path rest <<< "$mod_spec"
  pkg_path=$(readlink -f "$pkg_path")
  [ -d "$pkg_path" ] || die "Package path not a directory: $pkg_path"
  cabal_path=$(echo "$pkg_path"/*.cabal)
  [ -f "$cabal_path" ] || die "Does not look like a cabal package: $pkg_path"
  pkg_name=$(sed -nE -e 's|^name:\s*(.+)\s*$|\1|p' < "$cabal_path")
  [ -n "$pkg_name" ] || die "Package name cannot be detected, is it a valid cabal file?"

  # parse mod_name
  if [ -n "$rest" ]; then
    local mod_name
    # separate module name from symbols
    read -r mod_name rest <<< "$(echo -n "$rest" | sed -nE -e 's|^([.0-9a-zA-Z_]+)(\[(.*)\])?$|\1 \3|gp')"
    [ -z "$mod_name" ] && die "Module name cannot be extracted: $rest"
  fi

  # parse codegen_mode, cmpl_syms
  local codegen_mode cmpl_syms yol_dir
  cmpl_syms=$(echo -n "$rest" | sed -e 's|\s*,\s*| |g')
  if [ -z "$mod_name" ]; then
    mod_name=Project
    codegen_mode=ProjectMode
    cmpl_syms=manifest
    yol_dir=${pkg_name}
    yol_output_file="${out_dir}/${yol_dir}/contracts/Contracts.sol"
  elif [ -z "$cmpl_syms" ]; then
    codegen_mode=ObjectMode # object mode
    cmpl_syms=object
    yol_dir=${pkg_name}.${mod_name}
  else
    codegen_mode=FnMode # fn mode
    yol_dir=${pkg_name}.${mod_name}.custom
  fi
  yol_dir=${out_dir}/${yol_dir}
  mkdir -p "$yol_dir"
  mkdir -p "$yol_dir/contracts"

  is_verbose && {
    debug "Package path   : $pkg_path"
    debug "Cabal file     : $cabal_path"
    debug "Yol path       : $yol_dir"
    [ -n "$cmpl_syms" ] && \
    debug "Package name   : $pkg_name"
    debug "Module name    : $mod_name"
    debug "Target symbols : $cmpl_syms"
  }

  #
  # Build
  #

  # prepare cabal build files and build
  cat > "$yol_dir"/cabal.project <<EOF
package-dbs: clear, global, ${cabal_package_db}, ${dist_package_db}

packages:
  $cabal_path
  $yol_dir/runyol.cabal

package *
  ghc-options: -O0
EOF

  # instantiate runyol.cabal template
  {
    sed -e "s|__YOL_PKG_NAME__|$pkg_name|g"
  } < "$dist_path"/hs-pkgs/yol-suite/templates/runyol.cabal > "$yol_dir"/runyol.cabal

  # instantiate RunYol.hs template
  local actions
  actions=$(for i in $cmpl_syms; do
              echo -n "${codegen_name}${codegen_mode} $i"
            done)

  {
    {
      sed -e "s|%YOL_MOD_NAME%|${mod_name}|g" \
        -e "s|%COMPILE_ACTIONS%|${actions}|g"
    } < "$dist_path"/hs-pkgs/yol-suite/templates/RunYol.hs

    [ -n "$opt_force_rebuild" ] && echo "-- Rebuilding forced at: $(date --iso-8601=seconds)"
  } > "$yol_dir"/RunYol.hs

  is_verbose && {
    debug
    debug "=== BEGIN cabal.project"
    cat "$yol_dir"/cabal.project >&2
    debug "=== END cabal.project"
    debug
    debug "=== BEGIN runyol.cabal"
    cat "$yol_dir"/runyol.cabal >&2
    debug "=== END runyol.cabal"
    debug
    debug "=== BEGIN RunYol.hs"
    cat "$yol_dir"/RunYol.hs >&2
    debug "=== END RunYol.hs"
  }

  # run yol
  do_runyol --project-dir="$yol_dir" \
         > "${yol_output_file:-/dev/stdout}" || {
    [ -f "${yol_output_file}" ] && rm "${yol_output_file}"
    die "=== Failed to build yol module: $mod_spec"
  }

  # print output if needed
  is_verbose || [ -n "$show_output_always" ] && [  -f "${yol_output_file}" ] && cat "${yol_output_file}"

  is_verbose && {
    debug "=== Done with yol module: $mod_spec"
  }
}

main "$@"
